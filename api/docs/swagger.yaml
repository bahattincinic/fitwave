definitions:
  api.PaginatedResponse:
    properties:
      count:
        type: integer
      results: {}
    type: object
  api.createComponent.componentInput:
    properties:
      configs: {}
      name:
        type: string
      query:
        type: string
      type:
        $ref: '#/definitions/models.ComponentType'
    type: object
  api.createDashboard.dashboardInput:
    properties:
      name:
        type: string
    type: object
  api.getAccessToken.tokenRequestInput:
    properties:
      code:
        type: string
    type: object
  api.runQuery.queryInput:
    properties:
      query:
        type: string
    type: object
  api.updateComponent.componentInput:
    properties:
      configs: {}
      name:
        type: string
      query:
        type: string
      type:
        $ref: '#/definitions/models.ComponentType'
    type: object
  api.updateDashboard.dashboardInput:
    properties:
      name:
        type: string
    type: object
  models.Activity:
    properties:
      achievement_count:
        type: integer
      athlete:
        $ref: '#/definitions/models.Athlete'
      athlete_count:
        type: integer
      athleteID:
        type: integer
      average_cadence:
        type: number
      average_heart_rate:
        type: number
      average_speed:
        type: number
      average_temp:
        type: number
      average_watts:
        type: number
      comment_count:
        type: integer
      commute:
        type: boolean
      device_watts:
        type: boolean
      distance:
        type: number
      elapsed_time:
        type: integer
      end_lat_lng:
        type: string
      external_id:
        type: string
      flagged:
        type: boolean
      gear_id:
        description: bike or pair of shoes
        type: string
      has_kudos:
        type: boolean
      id:
        type: integer
      kilojoules:
        type: number
      kudos_count:
        type: integer
      location_city:
        type: string
      location_country:
        type: string
      location_state:
        type: string
      manual:
        type: boolean
      map:
        items:
          type: integer
        type: array
      max_heart_rate:
        type: number
      max_speed:
        type: number
      moving_time:
        type: integer
      name:
        type: string
      photo_count:
        type: integer
      private:
        type: boolean
      start_date:
        type: string
      start_date_local:
        type: string
      start_lat_lng:
        type: string
      time_zone:
        type: string
      total_elevation_gain:
        type: number
      trainer:
        type: boolean
      truncated:
        description: only present if activity is owned by authenticated athlete, returns
          0 if not truncated by privacy zones
        type: integer
      type:
        type: string
      upload_id:
        type: integer
      weighted_average_watts:
        type: integer
    type: object
  models.Athlete:
    properties:
      approve_followers:
        description: if has enhanced privacy enabled
        type: boolean
      badge_type_id:
        type: integer
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      firstname:
        type: string
      follower:
        description: this athlete’s following status of the authenticated athlete
        type: string
      friend:
        description: ‘pending’, ‘accepted’, ‘blocked’ or ‘null’, the authenticated
          athlete’s following status of this athlete
        type: string
      id:
        type: integer
      lastname:
        type: string
      premium:
        type: boolean
      profile:
        description: URL to a 124x124 pixel profile picture
        type: string
      profile_medium:
        description: URL to a 62x62 pixel profile picture
        type: string
      sex:
        type: string
      state:
        type: string
      tx:
        items:
          type: integer
        type: array
      updated_at:
        type: string
    type: object
  models.Component:
    properties:
      configs:
        items:
          type: integer
        type: array
      created_at:
        type: string
      dashboard:
        $ref: '#/definitions/models.Dashboard'
      dashboardID:
        type: integer
      id:
        type: integer
      name:
        type: string
      query:
        type: string
      type:
        $ref: '#/definitions/models.ComponentType'
      updated_at:
        type: string
    type: object
  models.ComponentType:
    enum:
    - table
    - text
    - pie_chart
    - bar_chart
    - line_chart
    type: string
    x-enum-varnames:
    - TableComponent
    - TextComponent
    - PieChartComponent
    - BarChartComponent
    - LineChartComponent
  models.Config:
    properties:
      client_id:
        type: integer
      client_secret:
        type: string
    type: object
  models.Dashboard:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Gear:
    properties:
      athlete:
        $ref: '#/definitions/models.Athlete'
      athleteID:
        type: integer
      brand_name:
        type: string
      description:
        type: string
      distance:
        type: number
      frame_type:
        type: string
      id:
        type: string
      model_name:
        type: string
      name:
        type: string
      primary:
        type: boolean
    type: object
  queue.TaskResult:
    properties:
      completionTime:
        type: string
      error: {}
      id:
        type: string
      result: {}
      status:
        $ref: '#/definitions/queue.TaskStatus'
    type: object
  queue.TaskStatus:
    enum:
    - pending
    - success
    - error
    - archived
    type: string
    x-enum-varnames:
    - Pending
    - Success
    - Error
    - Archived
  strava.AthleteDetailed:
    properties:
      approve_followers:
        description: if has enhanced privacy enabled
        type: boolean
      badge_type_id:
        type: integer
      bikes:
        items:
          $ref: '#/definitions/strava.GearSummary'
        type: array
      city:
        type: string
      clubs:
        items:
          $ref: '#/definitions/strava.ClubSummary'
        type: array
      country:
        type: string
      created_at:
        type: string
      date_preference:
        type: string
      email:
        type: string
      firstname:
        type: string
      follower:
        description: this athlete’s following status of the authenticated athlete
        type: string
      follower_count:
        type: integer
      friend:
        description: ‘pending’, ‘accepted’, ‘blocked’ or ‘null’, the authenticated
          athlete’s following status of this athlete
        type: string
      friend_count:
        type: integer
      ftp:
        type: integer
      id:
        type: integer
      lastname:
        type: string
      measurement_preference:
        type: string
      mutual_friend_count:
        type: integer
      premium:
        type: boolean
      profile:
        description: URL to a 124x124 pixel profile picture
        type: string
      profile_medium:
        description: URL to a 62x62 pixel profile picture
        type: string
      sex:
        type: string
      shoes:
        items:
          $ref: '#/definitions/strava.GearSummary'
        type: array
      state:
        type: string
      updated_at:
        type: string
      weight:
        description: kilograms
        type: number
    type: object
  strava.AuthorizationResponse:
    properties:
      State:
        type: string
      access_token:
        type: string
      athlete:
        $ref: '#/definitions/strava.AthleteDetailed'
    type: object
  strava.ClubSummary:
    properties:
      id:
        type: integer
      name:
        type: string
      profile:
        description: URL to a 124x124 pixel profile picture
        type: string
      profile_medium:
        description: URL to a 62x62 pixel profile picture
        type: string
    type: object
  strava.GearSummary:
    properties:
      distance:
        type: number
      id:
        type: string
      name:
        type: string
      primary:
        type: boolean
    type: object
  strava.User:
    properties:
      accessToken:
        type: string
      athlete:
        $ref: '#/definitions/strava.AthleteDetailed'
    type: object
info:
  contact: {}
paths:
  /activities:
    get:
      consumes:
      - application/json
      parameters:
      - description: pagination limit
        in: query
        name: limit
        type: string
      - description: active page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                ' count':
                  type: integer
                Results:
                  items:
                    $ref: '#/definitions/models.Activity'
                  type: array
              type: object
      summary: List Activities
      tags:
      - activity
  /activities/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Activity'
      summary: Get Activity
      tags:
      - activity
  /athletes:
    get:
      consumes:
      - application/json
      parameters:
      - description: pagination limit
        in: query
        name: limit
        type: string
      - description: active page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                ' count':
                  type: integer
                Results:
                  items:
                    $ref: '#/definitions/models.Athlete'
                  type: array
              type: object
      summary: List Athletes
      tags:
      - athlete
  /athletes/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Athlete ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Athlete'
      summary: Get Athlete
      tags:
      - athlete
  /auth/authorization-url:
    get:
      consumes:
      - application/json
      parameters:
      - description: Callback URL
        in: query
        name: callback_url
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Access Token from Auth Code
      tags:
      - auth
  /auth/token:
    post:
      consumes:
      - application/json
      parameters:
      - description: Access Token Input
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/api.getAccessToken.tokenRequestInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/strava.AuthorizationResponse'
      summary: Get Access Token from Auth Code
      tags:
      - auth
  /dashboard/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Dashboard ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete Dashboard
      tags:
      - dashboard
    get:
      consumes:
      - application/json
      parameters:
      - description: Dashboard ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Dashboard'
      summary: Get Dashboard
      tags:
      - dashboard
    put:
      consumes:
      - application/json
      parameters:
      - description: Dashboard ID
        in: path
        name: id
        required: true
        type: string
      - description: Dashboard Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.updateDashboard.dashboardInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Dashboard'
      summary: Update Dashboard
      tags:
      - dashboard
  /dashboard/{id}/run:
    post:
      consumes:
      - application/json
      parameters:
      - description: Dashboard ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/queue.TaskResult'
      summary: Run Dashboard
      tags:
      - dashboard
  /dashboards:
    get:
      consumes:
      - application/json
      parameters:
      - description: pagination limit
        in: query
        name: limit
        type: string
      - description: active page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                ' count':
                  type: integer
                Results:
                  items:
                    $ref: '#/definitions/models.Dashboard'
                  type: array
              type: object
      summary: List Dashboards
      tags:
      - dashboard
    post:
      consumes:
      - application/json
      parameters:
      - description: Dashboard Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.createDashboard.dashboardInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Dashboard'
      summary: Create Dashboard
      tags:
      - dashboard
  /dashboards/{id}/components:
    get:
      consumes:
      - application/json
      parameters:
      - description: Dashboard ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                ' count':
                  type: integer
                Results:
                  items:
                    $ref: '#/definitions/models.Component'
                  type: array
              type: object
      summary: List Dashboard Components
      tags:
      - dashboard
    post:
      consumes:
      - application/json
      parameters:
      - description: Component Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.createComponent.componentInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Component'
      summary: Create Dashboard Components
      tags:
      - dashboard
  /dashboards/{id}/components/{cpid}:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete Dashboard Component
      tags:
      - dashboard
    put:
      consumes:
      - application/json
      parameters:
      - description: Component Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.updateComponent.componentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Component'
      summary: Update Dashboard Component
      tags:
      - dashboard
  /dashboards/{id}/components/{cpid}/run:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Run Dashboard Component
      tags:
      - dashboard
  /gears:
    get:
      consumes:
      - application/json
      parameters:
      - description: pagination limit
        in: query
        name: limit
        type: string
      - description: active page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                ' count':
                  type: integer
                Results:
                  items:
                    $ref: '#/definitions/models.Gear'
                  type: array
              type: object
      summary: List Gears
      tags:
      - gear
  /gears/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Gear ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Gear'
      summary: Get Gear
      tags:
      - gear
  /user/config:
    get:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Config'
      summary: Get Application Config
      tags:
      - user
    put:
      consumes:
      - application/json
      parameters:
      - description: Config Input
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/models.Config'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Config'
      summary: Upsert Application Config
      tags:
      - user
  /user/me:
    get:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/strava.User'
      summary: Get Current User Details
      tags:
      - user
  /user/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: Query Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.runQuery.queryInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/queue.TaskResult'
      summary: Run Query
      tags:
      - user
  /user/sync:
    post:
      consumes:
      - application/json
      parameters:
      - description: Strava Access Token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/queue.TaskResult'
      summary: Sync Strava data
      tags:
      - user
  /user/task/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/queue.TaskResult'
      summary: Get Task Detail
      tags:
      - user
swagger: "2.0"
